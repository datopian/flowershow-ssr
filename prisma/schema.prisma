// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"] // https://www.prisma.io/blog/prisma-turso-ea-support-rXGd_Tmy3UXX#connect-to-turso-using-prisma

}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Org {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())

    createdById String @unique // temporarily unique until we support multiple orgs per user
    createdBy   User   @relation(fields: [createdById], references: [id])

    projects Project[] @relation

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    refresh_token_expires_in Int // https://next-auth.js.org/providers/github
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    org           Org? @relation // support multiple orgs in the future
    projects      Project[] @relation
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id            String @id @default(cuid())
    name          String
    type          String
    gh_owner      String
    gh_repository String
    gh_branch     String
    status        String @default("active") // active, inactive
    createdAt     DateTime @default(now())

    org           Org @relation(fields: [orgId], references: [id])
    orgId         String

    createdBy     User   @relation(fields: [createdById], references: [id])
    createdById   String

    @@unique([name, orgId])

}
